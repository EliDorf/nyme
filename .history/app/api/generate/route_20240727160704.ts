import { NextResponse } from 'next/server';
import { Groq } from 'groq-sdk';

// Initialize Groq client
const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY,
});

export async function POST(request: Request) {
  try {
    const { input } = await request.json();
    console.log("Received input:", input);  // Log the input

    const completion = await groq.completions.create({
      model: "llama3-8b-8192",
      prompt: `Generate 5 creative name variations for "${input}". Return the result as a JSON object with a 'suggestions' key containing an array of string suggestions. For example, if the input is "apple", the output might be:
      {
        "suggestions": ["Appy", "Apples", "Appen", "Plen", "Ppen"]
      }`,
      max_tokens: 150,
      temperature: 0.7,
      top_p: 1,
      stop: ["}"],
      stream: false,
    });

    console.log("Raw Groq response:", completion);  // Log the raw response

    const content = completion.choices[0]?.text;
    console.log("Content from Groq:", content);  // Log the content

    if (content) {
      try {
        const parsedContent = JSON.parse(content + '}');  // Add closing brace as we used it as a stop token
        console.log("Parsed content:", parsedContent);  // Log the parsed content
        
        if (Array.isArray(parsedContent.suggestions)) {
          return NextResponse.json({ suggestions: parsedContent.suggestions });
        } else {
          console.error("Invalid response format from Groq");
          return NextResponse.json({ error: 'Invalid response format' }, { status: 500 });
        }
      } catch (parseError) {
        console.error("Error parsing Groq response:", parseError);
        return NextResponse.json({ error: 'Error parsing response' }, { status: 500 });
      }
    } else {
      console.error("No content generated by Groq");
      return NextResponse.json({ error: 'No content generated' }, { status: 500 });
    }
  } catch (error) {
    console.error('Error:', error);
    return NextResponse.json({ error: 'Failed to generate names' }, { status: 500 });
  }
}