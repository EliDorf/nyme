import { NextResponse } from 'next/server';
import { Groq } from 'groq-sdk';

// Initialize Groq client
const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY,
});

export async function POST(request: Request) {
  try {
    const { input } = await request.json();
    console.log("Received input:", input);  // Log the input

    const chatCompletion = await groq.chat.completions.create({
      messages: [
        {
          role: "system",
          content: `a naming bot\n\ncreate variations of the given name like\n\nInput: apple Output: appy, apples, appen, plen, ppen\n\nanother example, input:bask output: basky, basken, Aske, sken, bast\n\nInput:${input}\n\nplease return it in a JSON format with a 'suggestions' key containing an array of string suggestions.`
        }
      ],
      model: "llama3-8b-8192",
      temperature: 1,
      max_tokens: 1024,
      top_p: 1,
      stream: false,
      response_format: {
        type: "json_object"
      },
    });

    console.log("Raw Groq response:", chatCompletion);  // Log the raw response

    const content = chatCompletion.choices[0]?.message?.content;
    console.log("Content from Groq:", content);  // Log the content

    if (content) {
      const parsedContent = JSON.parse(content);
      console.log("Parsed content:", parsedContent);  // Log the parsed content
      
      // Ensure the response has a 'suggestions' key with an array
      if (Array.isArray(parsedContent.suggestions)) {
        return NextResponse.json({ suggestions: parsedContent.suggestions });
      } else {
        console.error("Invalid response format from Groq");
        return NextResponse.json({ error: 'Invalid response format' }, { status: 500 });
      }
    } else {
      console.error("No content generated by Groq");
      return NextResponse.json({ error: 'No content generated' }, { status: 500 });
    }
  } catch (error) {
    console.error('Error:', error);
    return NextResponse.json({ error: 'Failed to generate names' }, { status: 500 });
  }
}